{"version":3,"sources":["api/unsplash/index.js","features/backgroundImage/backgroundImageSlice.js","features/backgroundImage/BackgroundImage.js","api/openWeatherMap/index.js","features/weather/weatherSlice.js","features/weather/Weather.js","api/quotes/index.js","features/quote/quoteSlice.js","features/quote/Quote.js","features/error/errorSlice.js","features/error/Error.js","features/journal/journalSlice.js","features/journal/components/JournalEntry.js","features/journal/components/JournalEntries.js","features/journal/Journal.js","App.js","app/store.js","index.js"],"names":["API_URL","process","unsplashApi","getImage","a","fetch","response","json","results","map","result","urls","full","getBackgroundImage","createAsyncThunk","backgroundImageSlice","createSlice","name","initialState","imageUrls","currentImageUrlIndex","reducers","switchToNextBackgroundImage","state","length","switchToPreviousBackgroundImage","newIndex","extraReducers","fulfilled","action","payload","actions","BackgroundImage","useSelector","backgroundImage","dispatch","useDispatch","useEffect","id","src","alt","openWeatherMapApi","getWeather","city","weatherMetadata","weather","temperature","main","temp","weatherSlice","metadata","setCity","setState","Weather","className","icon","description","quotesApi","getQuote","quote","contents","quotes","author","quoteSlice","Quote","errorSlice","errorMessage","retryHandler","clearErrorMessage","rejected","Error","error","onClick","journalSlice","entries","doneEntries","addJournalEntry","push","text","isDone","removeEntry","splice","toggleEntryDone","JournalEntry","children","aria-label","active","config","spread","JournalEntries","COLORS","getEntryColor","index","Journal","useState","newJournalEntry","setNewJournalEntry","journal","onSubmit","e","preventDefault","type","value","onChange","target","App","configureStore","reducer","backgroundImageReducer","weatherReducer","quoteReducer","journalReducer","errorReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.bf029362.chunk.js","sourcesContent":["const API_URL = `https://api.unsplash.com/search/photos?query=nature&page=1&per_page=5&client_id=${process.env.REACT_APP_UNSPLASH_ACCESS_KEY}`;\n\nexport const getImage = async () => {\n  const response = await fetch(API_URL);\n  const json = await response.json();\n\n  return json.results.map((result) => result.urls.full);\n};\n\nconst unsplashApi = {\n  getImage\n};\n\nexport default unsplashApi;\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport unsplashApi from \"../../api/unsplash\";\n\nexport const getBackgroundImage = createAsyncThunk(\n  \"backgroundImage/getImage\",\n  unsplashApi.getImage\n);\n\nexport const backgroundImageSlice = createSlice({\n  name: \"backgroundImage\",\n  initialState: {\n    imageUrls: [],\n    currentImageUrlIndex: 0\n  },\n  reducers: {\n    switchToNextBackgroundImage: (state) => {\n      state.currentImageUrlIndex =\n        (state.currentImageUrlIndex + 1) % state.imageUrls.length;\n    },\n    switchToPreviousBackgroundImage: (state) => {\n      let newIndex = state.currentImageUrlIndex - 1;\n      if (newIndex < 0) {\n        newIndex = state.imageUrls.length - 1;\n      }\n\n      state.currentImageUrlIndex = newIndex;\n    }\n  },\n  extraReducers: {\n    [getBackgroundImage.fulfilled]: (state, action) => {\n      state.imageUrls = action.payload;\n      state.currentImageUrlIndex = 0;\n    }\n  }\n});\n\nexport const {\n  switchToNextBackgroundImage,\n  switchToPreviousBackgroundImage\n} = backgroundImageSlice.actions;\n\nexport default backgroundImageSlice.reducer;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getBackgroundImage } from \"./backgroundImageSlice\";\n\nconst BackgroundImage = () => {\n  const { imageUrls, currentImageUrlIndex } = useSelector(\n    (state) => state.backgroundImage\n  );\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getBackgroundImage());\n  }, [dispatch]);\n\n  return (\n    <div id=\"background-image-container\">\n      <img src={imageUrls[currentImageUrlIndex]} alt=\"\" id=\"background-image\" />\n    </div>\n  );\n};\n\nexport default BackgroundImage;\n","const API_URL = `https://api.openweathermap.org/data/2.5/weather?appid=${process.env.REACT_APP_OPEN_WEATHER_MAP_API_KEY}&units=metric`;\n\nexport const getWeather = async (city, state) => {\n  const response = await fetch(`${API_URL}&q=${city},${state}`);\n  const json = await response.json();\n\n  return {\n    weatherMetadata: json.weather[0],\n    temperature: json.main.temp\n  };\n};\n\nconst openWeatherMapApi = {\n  getWeather\n};\n\nexport default openWeatherMapApi;\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport openWeatherMapApi from \"../../api/openWeatherMap\";\n\nexport const getWeather = createAsyncThunk(\n  \"weather/getWeather\",\n  ({ city, state }) => openWeatherMapApi.getWeather(city, state)\n);\n\nexport const weatherSlice = createSlice({\n  name: \"weather\",\n  initialState: {\n    city: \"Seattle\",\n    state: \"Washington\",\n    metadata: {},\n    temperature: \"\"\n  },\n  reducers: {\n    setCity: (state, action) => {\n      state.city = action.payload;\n    },\n    setState: (state, action) => {\n      state.state = action.payload;\n    }\n  },\n  extraReducers: {\n    [getWeather.fulfilled]: (state, action) => {\n      state.metadata = action.payload.weatherMetadata;\n      state.temperature = action.payload.temperature;\n    }\n  }\n});\n\nexport const { setCity, setState } = weatherSlice.actions;\n\nexport default weatherSlice.reducer;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getWeather } from \"./weatherSlice\";\n\nconst Weather = () => {\n  const { metadata, temperature, city, state } = useSelector(\n    (state) => state.weather\n  );\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getWeather({ city, state }));\n  }, [dispatch, city, state]);\n\n  return (\n    <div className=\"weather\">\n      <div className=\"temperature-container\">\n        <img\n          src={`http://openweathermap.org/img/wn/${metadata.icon}@2x.png`}\n          alt=\"\"\n        />\n        <div className=\"weather-text\">\n          <p className=\"temperature\">{temperature}°</p>\n          <p className=\"weather-description\">{metadata.description}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Weather;\n","const API_URL = `https://quotes.rest/qod?language=en`;\n\nexport const getQuote = async () => {\n  const response = await fetch(API_URL);\n  const json = await response.json();\n  const quote = json.contents.quotes[0];\n\n  return {\n    quote: quote.quote,\n    author: quote.author\n  };\n};\n\nconst quotesApi = {\n  getQuote\n};\n\nexport default quotesApi;\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport quotesApi from \"../../api/quotes\";\n\nexport const getQuote = createAsyncThunk(\"quote/getQuote\", quotesApi.getQuote);\n\nexport const quoteSlice = createSlice({\n  name: \"quote\",\n  initialState: {\n    quote: \"\",\n    author: \"\"\n  },\n  extraReducers: {\n    [getQuote.fulfilled]: (state, action) => {\n      state.quote = action.payload.quote;\n      state.author = action.payload.author;\n    }\n  }\n});\n\nexport default quoteSlice.reducer;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getQuote } from \"./quoteSlice\";\n\nconst Quote = () => {\n  const { quote, author } = useSelector((state) => state.quote);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getQuote());\n  }, [dispatch]);\n\n  return (\n    <div id=\"quote\">\n      <p className=\"quote-message\">“{quote}”</p>\n      <p className=\"quote-author\">{author}</p>\n    </div>\n  );\n};\n\nexport default Quote;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { getBackgroundImage } from \"../backgroundImage/backgroundImageSlice\";\nimport { getQuote } from \"../quote/quoteSlice\";\nimport { getWeather } from \"../weather/weatherSlice\";\n\nexport const errorSlice = createSlice({\n  name: \"errors\",\n  initialState: {\n    errorMessage: \"\",\n    retryHandler: null\n  },\n  reducers: {\n    clearErrorMessage: (state) => {\n      state.errorMessage = \"\";\n      state.retryHandler = null;\n    }\n  },\n  extraReducers: {\n    [getBackgroundImage.rejected]: (state) => {\n      state.errorMessage = \"Getting image failed.\";\n      state.retryHandler = getBackgroundImage;\n    },\n    [getQuote.rejected]: (state) => {\n      state.errorMessage = \"Getting the quote failed.\";\n      state.retryHandler = getQuote;\n    },\n    [getWeather.rejected]: (state) => {\n      state.errorMessage = \"Getting the weather failed.\";\n      state.retryHandler = getWeather;\n    }\n  }\n});\n\nexport const { clearErrorMessage } = errorSlice.actions;\n\nexport default errorSlice.reducer;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { clearErrorMessage } from \"./errorSlice\";\n\nconst Error = () => {\n  const { errorMessage, retryHandler } = useSelector((state) => state.error);\n  const dispatch = useDispatch();\n\n  if (!errorMessage) {\n    return null;\n  }\n\n  return (\n    <div id=\"error-message-container\">\n      <p>{errorMessage}</p>\n      <button\n        onClick={() => {\n          dispatch(retryHandler());\n          dispatch(clearErrorMessage());\n        }}\n      >\n        X\n      </button>\n    </div>\n  );\n};\n\nexport default Error;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const journalSlice = createSlice({\n  name: \"journal\",\n  initialState: {\n    entries: [\n      // { text: \"Corte Greens\", isDone: false },\n      // { text: \"Corte tees\", isDone: false },\n      // { text: \"Corte fairways\", isDone: false },\n      // { text: \"Passar bunkers\", isDone: false }\n    ],\n    doneEntries: []\n  },\n  reducers: {\n    addJournalEntry: (state, action) => {\n      state.entries.push({ text: action.payload, isDone: false });\n    },\n    removeEntry: (state, action) => {\n      state.entries.splice(action.payload, 1);\n    },\n    toggleEntryDone: (state, action) => {\n      state.entries[action.payload].isDone = !state.entries[action.payload]\n        .isDone;\n    }\n  }\n});\n\nexport const {\n  addJournalEntry,\n  removeEntry,\n  toggleEntryDone\n} = journalSlice.actions;\n\nexport default journalSlice.reducer;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { removeEntry, toggleEntryDone } from \"../journalSlice\";\nimport Confetti from \"react-dom-confetti\";\n\nconst JournalEntry = ({ children, id, isDone }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className={`entry`}>\n      <div className=\"entry-actions-container\">\n        <button\n          aria-label=\"Remove\"\n          className=\"remove\"\n          onClick={() => dispatch(removeEntry(id))}\n        >\n          Remove\n        </button>\n        <button\n          aria-label=\"Mark Done\"\n          className=\"done\"\n          onClick={() => {\n            dispatch(toggleEntryDone(id));\n          }}\n        >\n          {isDone ? \"Redo\" : \"Done\"}\n          <Confetti active={isDone} config={{ spread: 360 }} />\n        </button>\n      </div>\n      {children}\n    </div>\n  );\n};\n\nexport default JournalEntry;\n","import React from \"react\";\nimport JournalEntry from \"./JournalEntry\";\n\nconst JournalEntries = ({ entries }) => {\n  const COLORS = [\n    \"surface-blue\",\n    \"surface-red\",\n    \"surface-green\",\n    \"surface-orange\"\n  ];\n\n  const getEntryColor = (index) => COLORS[index % COLORS.length];\n\n  return (\n    <div className=\"surface\">\n      <ul className=\"entries-list\">\n        {entries.map(({ text, isDone }, index) => (\n          <li\n            key={text}\n            className={`${getEntryColor(index)} surface-styles ${\n              isDone ? \"entry-done\" : \"\"\n            }`}\n          >\n            <JournalEntry id={index} isDone={isDone}>\n              {text}\n            </JournalEntry>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default JournalEntries;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport JournalEntries from \"./components/JournalEntries\";\nimport { addJournalEntry } from \"./journalSlice\";\n\nconst Journal = () => {\n  const [newJournalEntry, setNewJournalEntry] = useState(\"\");\n  const { entries } = useSelector((state) => state.journal);\n  const dispatch = useDispatch();\n\n  const onFormSubmit = (e) => {\n    e.preventDefault();\n\n    if (newJournalEntry === \"\") {\n      return;\n    }\n\n    dispatch(addJournalEntry(newJournalEntry));\n    setNewJournalEntry(\"\");\n  };\n\n  return (\n    <>\n      <div id=\"journal\" className=\"surface\">\n        <h2>To Do Today</h2>\n\n        <form onSubmit={onFormSubmit}>\n          <input\n            type=\"text\"\n            className=\"journal-input\"\n            value={newJournalEntry}\n            onChange={(e) => {\n              setNewJournalEntry(e.target.value);\n            }}\n            aria-label=\"New journal entry\"\n          />\n        </form>\n      </div>\n      <JournalEntries entries={entries} />\n    </>\n  );\n};\n\nexport default Journal;\n","import React from \"react\";\nimport BackgroundImage from \"./features/backgroundImage/BackgroundImage\";\nimport Weather from \"./features/weather/Weather\";\nimport Quote from \"./features/quote/Quote\";\nimport Error from \"./features/error/Error\";\nimport Journal from \"./features/journal/Journal\";\n//import BackgroundImageLeftControl from \"./features/backgroundImage/components/BackgroundImageLeftControl\";\n//import BackgroundImageRightControl from \"./features/backgroundImage/components/BackgroundImageRightControl\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BackgroundImage />\n      <header>\n        <Error />\n        <Weather />\n      </header>\n      <aside className=\"left-wallpaper-control wallpaper-control\">\n        {/* <BackgroundImageLeftControl /> */}\n      </aside>\n      <main>\n        <Journal />\n      </main>\n      <aside className=\"right-wallpaper-control wallpaper-control\">\n        {/* <BackgroundImageRightControl /> */}\n      </aside>\n      <footer>\n        <Quote />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport backgroundImageReducer from \"../features/backgroundImage/backgroundImageSlice\";\nimport journalReducer from \"../features/journal/journalSlice\";\nimport quoteReducer from \"../features/quote/quoteSlice\";\nimport weatherReducer from \"../features/weather/weatherSlice\";\nimport errorReducer from \"../features/error/errorSlice\";\n\nexport default configureStore({\n  reducer: {\n    backgroundImage: backgroundImageReducer,\n    weather: weatherReducer,\n    quote: quoteReducer,\n    journal: journalReducer,\n    error: errorReducer\n  }\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./app/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}